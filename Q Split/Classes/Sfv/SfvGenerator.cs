using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.IO;

namespace QSplit.Tools
{
    static class SfvGenerator
    {
        private static bool isRunning;
        private static int finished;
        private static string outPutFile = null;
        private static List<string> files = null;

        public static int Finished
        {
            get { return finished; }
        }

        public static string OutPutFile
        {
            get { return SfvGenerator.outPutFile; }
            set { SfvGenerator.outPutFile = value; }
        }

        public static List<string> Files
        {
            get { return files; }
            set { files = value; }
        }

        public static bool IsRunning
        {
            get { return SfvGenerator.isRunning; }
            set { SfvGenerator.isRunning = value; }
        }

        public static void GenerateSfv()
        {
            isRunning = true;
            finished = 0;
            Thread th = new Thread(new ThreadStart(CalcHash));
            th.Priority = ThreadPriority.Highest;
            th.Start();

        }

        private static void CalcHash()
        {
            if (files == null)
                return;

            if (outPutFile == null)
                return;

            StreamWriter sW = new StreamWriter(outPutFile + ".sfv");
            sW.WriteLine("; Generated by MMH Split on " + DateTime.Now.ToString());
            sW.WriteLine("");
            CRC32 crc = new CRC32();

            for (int i = 0; i < files.Count; i++)
            {
                FileStream f = new FileStream(files[i], FileMode.Open,
                               FileAccess.Read, FileShare.Read, 8192);

                sW.WriteLine(Path.GetFileName(files[i]) + " " + crc.GetCrc32(f).ToString("X"));
                f.Close();
                f.Dispose();
                Interlocked.Increment(ref finished);
            }

            sW.Close();
            sW.Dispose();
            isRunning = false;
        }
    }
}
